@startuml
skinparam linetype ortho
skinparam rectangleRoundCorner 10
skinparam packageRoundCorner 10
skinparam packageBorderStyle solid
skinparam databaseRoundCorner 20
skinparam cloudBorderStyle dashed
skinparam defaultFontSize 14
skinparam ArrowFontColor #333366
skinparam ArrowFontSize 13

actor "User" as user
rectangle "GitHub\n<size:10>[Source/Trigger]" as github

cloud "AWS Cloud (Prod)" {
  package "CI/CD Pipeline" {
    rectangle "CodePipeline (prod)\n<size:10>[CI/CD Orchestration]" as pipeline
    rectangle "CodeBuild (prod)\n<size:10>[Builds Docker image]" as codebuild
    rectangle "ECR (prod)\n<size:10>[Docker Image Registry]" as ecr
    rectangle "S3 (prod)\n<size:10>[Build Artifacts]" as s3
    rectangle "CodeDeploy (prod)\n<size:10>[Blue/Green Deployment]" as codedeploy
    rectangle "IAM Roles (prod)\n<size:10>[Permissions]" as iam
    rectangle "Codestar Connection (prod)\n<size:10>[GitHub Integration]" as codestar
  }

  package "VPC (prod)" {
    package "Public Subnet" {
      rectangle "Internet Gateway (IGW)\n<size:10>[Public internet access]" as igw
      rectangle "ALB (prod)\n<size:10>[Ingress traffic]" as alb
      rectangle "NAT Gateway (prod)\n<size:10>[Outbound internet]" as nat
    }

    package "Private Subnet" {
      rectangle "ECS Service (prod)\n<size:10>[Manages container tasks]" as ecs_service
      rectangle "EC2 (prod) x2~5\n<size:10>[Container hosts, Auto Scaling]" as ec2
      database "RDS (prod)\n(Multi-AZ)\n<size:10>[Relational DB, High Availability]" as rds
    }

    rectangle "SG: ALB (prod)\n<size:9>[Allow HTTP/S 0.0.0.0/0]" as sg_alb
    rectangle "SG: ECS (prod)\n<size:9>[Only from ALB SG]" as sg_ecs
    rectangle "SG: RDS (prod)\n<size:9>[Only from ECS SG]" as sg_rds
  }
}

' 사용자 → 서비스 흐름
user -down-> alb : "<b><color:blue>1. HTTPS Request</color></b>"
igw -right-> alb : "<b><color:blue>2. Inbound Route</color></b>"
alb -down-> ecs_service : "<b><color:blue>3. Forward to ECS</color></b>"
ecs_service -down-> ec2 : "<b><color:blue>4. Runs on EC2</color></b>"
ec2 -down-> rds : "<b><color:blue>5. DB Access</color></b>"
ec2 -right-> nat : "<b><color:blue>6. Outbound API</color></b>"
nat -up-> igw : "<b><color:blue>7. Internet</color></b>"

' CI/CD 파이프라인 흐름
github -down-> codestar : "<b><color:darkgreen>1. PR/Push</color></b>"
codestar -down-> pipeline : "<b><color:darkgreen>2. Webhook</color></b>"
pipeline -down-> codebuild : "<b><color:darkgreen>3. Build</color></b>"
codebuild -down-> s3 : "<b><color:darkgreen>4. Artifact</color></b>"
codebuild -down-> ecr : "<b><color:darkgreen>5. Docker Image</color></b>"
pipeline -down-> codedeploy : "<b><color:darkgreen>6. Deploy</color></b>"
codedeploy -down-> ecs_service : "<b><color:darkgreen>7. ECS Deploy</color></b>"
codedeploy .> alb : "<b><color:darkgreen>8. Update Listener</color></b>"

' 보안 그룹/권한 흐름
alb .down.> sg_alb : "<b><color:purple>1. SG</color></b>"
ecs_service .down.> sg_ecs : "<b><color:purple>2. SG</color></b>"
rds .down.> sg_rds : "<b><color:purple>3. SG</color></b>"
codebuild ..> iam : "<b><color:orange>4. IAM</color></b>"
ecs_service ..> iam : "<b><color:orange>5. Task Role</color></b>"

' 설명 주석
note right of pipeline
  <b>CodePipeline</b>
  - 전체 CI/CD 오케스트레이션
end note

note right of codebuild
  <b>CodeBuild</b>
  - 소스 빌드, 도커 이미지 생성
end note

note right of codedeploy
  <b>CodeDeploy</b>
  - ECS Blue/Green 배포
end note

note right of alb
  <b>ALB</b>
  - Application Load Balancer
  - HTTPS Ingress
end note

note right of ecs_service
  <b>ECS Service</b>
  - 컨테이너 오케스트레이션
  - Auto Scaling
end note

note right of rds
  <b>RDS (Multi-AZ)</b>
  - 고가용성 관계형 DB
end note

@enduml
