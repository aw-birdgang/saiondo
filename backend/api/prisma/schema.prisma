generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// 열거형 정의
enum Gender {
  MALE
  FEMALE
  OTHER
}

enum RelationshipStatus {
  PENDING
  ACTIVE
  ENDED
}

enum MessageSender {
  USER
  AI
  SYSTEM
}

enum ProfileSource {
  USER_INPUT
  AI_ANALYSIS
  SYSTEM
}

enum QuestionType {
  PERSONALITY
  RELATIONSHIP
  DAILY
  MBTI
}

enum PushStatus {
  SCHEDULED
  SENT
  FAILED
  CANCELLED
}

// 모델 정의
model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  birthDate DateTime
  gender    Gender
  fcmToken  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  assistants      Assistant[]
  chatHistories   ChatHistory[]
  personaProfiles PersonaProfile[]
  pushSchedules   PushSchedule[]
  generatedReports Advice[]    @relation("GeneratedBy")
  channelsAsUser1 Channel[] @relation("ChannelUser1")
  channelsAsUser2 Channel[] @relation("ChannelUser2")
}

model Channel {
  id        String   @id @default(uuid())
  user1Id   String
  user2Id   String
  status    String
  startedAt DateTime
  endedAt   DateTime?
  inviteCode String? @unique
  anniversary  DateTime?
  keywords     String?   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  assistants Assistant[]
  advices Advice[]
  chatHistories ChatHistory[]
  coupleAnalyses CoupleAnalysis[]
  user1     User     @relation("ChannelUser1", fields: [user1Id], references: [id])
  user2     User     @relation("ChannelUser2", fields: [user2Id], references: [id])
}

model Assistant {
  id        String   @id @default(uuid())
  userId    String
  channelId String
  user      User     @relation(fields: [userId], references: [id])
  channel   Channel  @relation(fields: [channelId], references: [id])
  chatHistories ChatHistory[]
  createdAt DateTime @default(now())

  @@map("assistants")
}

model ChatHistory {
  id          String    @id @default(uuid())
  assistantId String    @map("assistant_id")
  channelId   String    @map("channel_id")
  userId      String
  sender      String
  message     String
  createdAt   DateTime  @default(now())
  assistant   Assistant @relation(fields: [assistantId], references: [id])
  channel     Channel   @relation(fields: [channelId], references: [id])
  user        User      @relation(fields: [userId], references: [id])
}

model CoupleAnalysis {
  id           String   @id @default(uuid())
  channelId    String
  rawResult    String   @db.Text
  createdAt    DateTime @default(now())
  channel      Channel  @relation(fields: [channelId], references: [id])
}

model CategoryCode {
  id          String   @id @default(uuid())
  code        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  questionTemplates QuestionTemplate[]
  personaProfiles   PersonaProfile[]

  @@map("category_codes")
}

model PersonaProfile {
  id              String        @id @default(uuid())
  userId          String       @map("user_id")
  categoryCodeId  String       @map("category_code_id")
  content         String       @db.Text
  isStatic        Boolean      @default(false) @map("is_static")
  source          ProfileSource
  confidenceScore Float        @map("confidence_score")
  createdAt       DateTime     @default(now()) @map("created_at")
  updatedAt       DateTime     @updatedAt @map("updated_at")

  user            User         @relation(fields: [userId], references: [id])
  categoryCode    CategoryCode @relation(fields: [categoryCodeId], references: [id])

  @@map("persona_profiles")
}

model Advice {
  id         String   @id @default(uuid())
  channelId  String
  advice     String
  createdAt  DateTime @default(now())

  generatedBy   User?    @relation("GeneratedBy", fields: [generatedById], references: [id])
  generatedById String?
  channel    Channel  @relation(fields: [channelId], references: [id])
}

model QuestionTemplate {
  id             String        @id @default(uuid())
  categoryCodeId String        @map("category_code_id")
  questionText   String        @map("question_text") @db.Text
  tier           Int
  type           QuestionType
  createdAt      DateTime      @default(now()) @map("created_at")

  categoryCode   CategoryCode  @relation(fields: [categoryCodeId], references: [id])
  pushSchedules  PushSchedule[]

  @@map("question_templates")
}

model PushSchedule {
  id           String      @id @default(uuid())
  userId       String      @map("user_id")
  questionId   String      @map("question_id")
  scheduledAt  DateTime    @map("scheduled_at")
  sentAt       DateTime?   @map("sent_at")
  status       PushStatus

  user         User        @relation(fields: [userId], references: [id])
  question     QuestionTemplate @relation(fields: [questionId], references: [id])
  userAnswer   UserAnswer?

  @@map("push_schedules")
}

model UserAnswer {
  id           String      @id @default(uuid())
  pushScheduleId String    @map("push_schedule_id") @unique
  answerText   String      @db.Text
  createdAt    DateTime    @default(now()) @map("created_at")

  pushSchedule PushSchedule @relation(fields: [pushScheduleId], references: [id])
}
