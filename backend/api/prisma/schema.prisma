generator client {
  provider = "prisma-client-js" // Prisma Client for TypeScript/JavaScript
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ===== ENUMS =====

enum Gender {
  MALE      // 남성
  FEMALE    // 여성
  OTHER     // 기타/미지정
}

enum RelationshipStatus {
  PENDING   // 커플 매칭 대기
  ACTIVE    // 커플 관계 유지중
  ENDED     // 커플 관계 종료
}

enum MessageSender {
  USER      // 사용자
  AI        // AI(챗봇)
  SYSTEM    // 시스템(알림 등)
}

enum ProfileSource {
  USER_INPUT    // 사용자가 직접 입력
  AI_ANALYSIS   // AI가 분석/제안
  SYSTEM        // 시스템 자동 생성
}

enum QuestionType {
  PERSONALITY    // 성격 관련
  RELATIONSHIP   // 연애/관계 관련
  DAILY          // 일상/습관 관련
  MBTI           // MBTI 등 성향 관련
}

enum PushStatus {
  SCHEDULED   // 발송 예정
  SENT        // 발송 완료
  FAILED      // 발송 실패
  CANCELLED   // 발송 취소
}

enum PointType {
  MISSION_REWARD
  PROFILE_UPDATE
  CHAT_USE
  ADMIN_ADJUST
  ETC
}

// ===== MODELS =====

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  birthDate DateTime
  gender    Gender
  fcmToken  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  point     Int      @default(0)

  // 관계
  assistants      Assistant[]
  chatHistories   ChatHistory[]
  personaProfiles PersonaProfile[]
  pushSchedules   PushSchedule[]
  generatedReports Advice[]    @relation("GeneratedBy")
  channelsAsUser1 Channel[]    @relation("ChannelUser1")
  channelsAsUser2 Channel[]    @relation("ChannelUser2")
  events          Event[]
  suggestedFields SuggestedField[]
  pointHistories  PointHistory[]
}

model Channel {
  id        String   @id @default(uuid())
  user1Id   String
  user2Id   String
  status    String
  startedAt DateTime
  endedAt   DateTime?
  inviteCode String? @unique
  anniversary  DateTime?
  keywords     String?   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // 관계
  assistants      Assistant[]
  advices         Advice[]
  chatHistories   ChatHistory[]
  coupleAnalyses  CoupleAnalysis[]
  user1           User     @relation("ChannelUser1", fields: [user1Id], references: [id])
  user2           User     @relation("ChannelUser2", fields: [user2Id], references: [id])
}

model Assistant {
  id        String   @id @default(uuid())
  userId    String
  channelId String
  createdAt DateTime @default(now())

  // 관계
  user         User     @relation(fields: [userId], references: [id])
  channel      Channel  @relation(fields: [channelId], references: [id])
  chatHistories ChatHistory[]

  @@map("assistants")
}

model ChatHistory {
  id          String    @id @default(uuid())
  assistantId String    @map("assistant_id")
  channelId   String    @map("channel_id")
  userId      String
  sender      String
  message     String
  createdAt   DateTime  @default(now())

  // 관계
  assistant   Assistant @relation(fields: [assistantId], references: [id])
  channel     Channel   @relation(fields: [channelId], references: [id])
  user        User      @relation(fields: [userId], references: [id])
}

model CoupleAnalysis {
  id           String   @id @default(uuid())
  channelId    String
  rawResult    String   @db.Text
  createdAt    DateTime @default(now())

  // 관계
  channel      Channel  @relation(fields: [channelId], references: [id])
}

model CategoryCode {
  id          String   @id @default(uuid())
  code        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // 관계
  questionTemplates QuestionTemplate[]
  personaProfiles   PersonaProfile[]
  suggestedFields   SuggestedField[]

  @@map("category_codes")
}

model PersonaProfile {
  id              String        @id @default(uuid())
  userId          String        @map("user_id")
  categoryCodeId  String        @map("category_code_id")
  content         String        @db.Text
  isStatic        Boolean       @default(false) @map("is_static")
  source          ProfileSource
  confidenceScore Float         @map("confidence_score")
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @updatedAt @map("updated_at")

  // 관계
  user            User          @relation(fields: [userId], references: [id])
  categoryCode    CategoryCode  @relation(fields: [categoryCodeId], references: [id])

  @@map("persona_profiles")
  @@unique([userId, categoryCodeId])
}

model Advice {
  id         String   @id @default(uuid())
  channelId  String
  advice     String
  createdAt  DateTime @default(now())

  // 관계
  generatedBy   User?    @relation("GeneratedBy", fields: [generatedById], references: [id])
  generatedById String?
  channel       Channel  @relation(fields: [channelId], references: [id])
}

model QuestionTemplate {
  id             String        @id @default(uuid())
  categoryCodeId String        @map("category_code_id")
  questionText   String        @map("question_text") @db.Text
  tier           Int
  type           QuestionType
  createdAt      DateTime      @default(now()) @map("created_at")

  // 관계
  categoryCode   CategoryCode  @relation(fields: [categoryCodeId], references: [id])
  pushSchedules  PushSchedule[]

  @@map("question_templates")
}

model PushSchedule {
  id           String      @id @default(uuid())
  userId       String      @map("user_id")
  questionId   String      @map("question_id")
  scheduledAt  DateTime    @map("scheduled_at")
  sentAt       DateTime?   @map("sent_at")
  status       PushStatus

  // 관계
  user         User        @relation(fields: [userId], references: [id])
  question     QuestionTemplate @relation(fields: [questionId], references: [id])
  userAnswer   UserAnswer?

  @@map("push_schedules")
}

model UserAnswer {
  id           String      @id @default(uuid())
  pushScheduleId String    @map("push_schedule_id") @unique
  answerText   String      @db.Text
  createdAt    DateTime    @default(now()) @map("created_at")

  // 관계
  pushSchedule PushSchedule @relation(fields: [pushScheduleId], references: [id])
}

model Event {
  id          String   @id @default(uuid())
  userId      String
  title       String
  description String?
  startTime   DateTime
  endTime     DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // 관계
  user        User     @relation(fields: [userId], references: [id])

  @@map("events")
}

model SuggestedField {
  id              String   @id @default(uuid())
  userId          String
  categoryCodeId  String
  content         String   @db.Text
  source          ProfileSource
  confidenceScore Float
  status          String   // 'PENDING', 'APPROVED', 'REJECTED'
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // 관계
  user            User         @relation(fields: [userId], references: [id])
  categoryCode    CategoryCode @relation(fields: [categoryCodeId], references: [id])
}

model PointHistory {
  id          String   @id @default(uuid())
  userId      String
  amount      Int
  type        PointType
  description String?
  createdAt   DateTime @default(now())

  user        User     @relation(fields: [userId], references: [id])
}

model BasicQuestionCategory {
  id        String   @id @default(uuid())
  name      String
  code      String   @unique
  questions BasicQuestion[]
}

model BasicQuestion {
  id          String   @id @default(uuid())
  question    String
  description String?
  categoryId  String
  category    BasicQuestionCategory @relation(fields: [categoryId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  answers     BasicAnswer[]
}

model BasicAnswer {
  id         String   @id @default(uuid())
  userId     String
  questionId String
  answer     String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  question   BasicQuestion @relation(fields: [questionId], references: [id])
}
