generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// 열거형 정의
enum Gender {
  MALE
  FEMALE
  OTHER
}

enum RelationshipStatus {
  PENDING
  ACTIVE
  ENDED
}

enum MessageSender {
  USER
  AI
  SYSTEM
}

enum ProfileSource {
  USER_INPUT
  AI_ANALYSIS
  SYSTEM
}

enum QuestionType {
  PERSONALITY
  RELATIONSHIP
  DAILY
  MBTI
}

enum PushStatus {
  SCHEDULED
  SENT
  FAILED
  CANCELLED
}

// 모델 정의
model User {
  id        String   @id @default(uuid())
  name      String
  birthDate DateTime @map("birth_date")
  gender    Gender
  mbti      String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // 관계 정의
  chatHistories    ChatHistory[]
  personaProfiles  PersonaProfile[]
  pushSchedules    PushSchedule[]
  generatedReports AdviceReport[]    @relation("GeneratedBy")
  relationshipsAsUser1 Relationship[] @relation("User1")
  relationshipsAsUser2 Relationship[] @relation("User2")

  @@map("users")
}

model Relationship {
  id        String   @id @default(uuid())
  user1Id   String
  user2Id   String
  status    RelationshipStatus
  startedAt DateTime?
  endedAt   DateTime?
  room      Room?

  // 관계 정의
  user1     User             @relation("User1", fields: [user1Id], references: [id])
  user2     User             @relation("User2", fields: [user2Id], references: [id])
  adviceReports AdviceReport[]

  @@map("relationships")
}

model ChatHistory {
  id                 String       @id @default(uuid())
  userId             String      @map("user_id")
  message            String      @db.Text
  sender             MessageSender
  isQuestionResponse Boolean     @default(false) @map("is_question_response")
  isUserInitiated    Boolean     @default(true) @map("is_user_initiated")
  analyzedByLlm      Boolean     @default(false) @map("analyzed_by_llm")
  timestamp          DateTime    @default(now())
  roomId             String
  room               Room          @relation(fields: [roomId], references: [id])
  user               User          @relation(fields: [userId], references: [id])

  @@map("chat_histories")
}

model CategoryCode {
  id          String   @id @default(uuid())
  code        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  personaProfiles PersonaProfile[]

  @@map("category_codes")
}

model PersonaProfile {
  id              String        @id @default(uuid())
  userId          String       @map("user_id")
  categoryCodeId  String       @map("category_code_id")
  content         String       @db.Text
  isStatic        Boolean      @default(false) @map("is_static")
  source          ProfileSource
  confidenceScore Float        @map("confidence_score")
  createdAt       DateTime     @default(now()) @map("created_at")
  updatedAt       DateTime     @updatedAt @map("updated_at")

  user            User         @relation(fields: [userId], references: [id])
  categoryCode    CategoryCode @relation(fields: [categoryCodeId], references: [id])

  @@map("persona_profiles")
}

model AdviceReport {
  id             String      @id @default(uuid())
  relationshipId String      @map("relationship_id")
  generatedById  String      @map("generated_by")
  reportDate     DateTime    @map("report_date")
  summary        String      @db.Text
  adviceForUser1 String      @map("advice_for_user1") @db.Text
  adviceForUser2 String      @map("advice_for_user2") @db.Text

  // 관계 정의
  relationship   Relationship @relation(fields: [relationshipId], references: [id])
  generatedBy    User        @relation("GeneratedBy", fields: [generatedById], references: [id])

  @@map("advice_reports")
}

model QuestionTemplate {
  id           String        @id @default(uuid())
  categoryCode String       @map("category_code")
  questionText String       @map("question_text") @db.Text
  tier         Int
  type         QuestionType
  createdAt    DateTime     @default(now()) @map("created_at")

  // 관계 정의
  pushSchedules PushSchedule[]

  @@map("question_templates")
}

model PushSchedule {
  id           String      @id @default(uuid())
  userId       String      @map("user_id")
  questionId   String      @map("question_id")
  scheduledAt  DateTime    @map("scheduled_at")
  sentAt       DateTime?   @map("sent_at")
  status       PushStatus

  // 관계 정의
  user         User        @relation(fields: [userId], references: [id])
  question     QuestionTemplate @relation(fields: [questionId], references: [id])

  @@map("push_schedules")
}

model Room {
  id             String       @id @default(uuid())
  relationshipId String       @unique
  createdAt      DateTime     @default(now())
  relationship   Relationship @relation(fields: [relationshipId], references: [id])
  chatHistories  ChatHistory[]
  // ... 필요시 adviceReports, personaProfiles 등도 연결

  @@map("rooms")
}
