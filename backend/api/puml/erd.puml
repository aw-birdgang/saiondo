@startuml
!theme plain
skinparam componentStyle uml2
skinparam shadowing false
skinparam roundcorner 15
skinparam monochrome true
skinparam backgroundColor #F9F9F9
skinparam ArrowColor Black
skinparam ArrowFontColor Black
skinparam defaultFontName "Nanum Gothic"

skinparam linetype ortho
skinparam rectangle {
  RoundCorner 10
  BackgroundColor #F8F8FF
  BorderColor #333366
  FontColor #222244
}
skinparam entity {
  BackgroundColor #F0F8FF
  BorderColor #333366
  FontColor #222244
}
hide circle

' 엔티티 정의
entity "User" as User {
  * id : String
  * email : String
  * password : String
  * gender : Gender
  * birthDate : DateTime
}

entity "UserProfile" as UserProfile {
  * id : String
  * userId : String
  * name : String
  * fcmToken : String
  * point : Int
}

entity "UserSubscription" as UserSubscription {
  * id : String
  * userId : String
  * isSubscribed : Boolean
  * subscriptionUntil : DateTime
}

entity "Wallet" as Wallet {
  * id : String
  * userId : String
  * address : String
  * privateKey : String
  * tokenBalance : String
}

entity "Channel" as Channel {
  * id : String
  * inviteCode : String
  * status : String
  * startedAt : DateTime
}

entity "ChannelMember" as ChannelMember {
  * id : String
  * userId : String
  * channelId : String
  * role : String
  * joinedAt : DateTime
}

entity "Chat" as Chat {
  * id : String
  * channelId : String
  * senderType : String <<'user' or 'assistant'>>
  * senderId : String
  * message : String
  * createdAt : DateTime
}

entity "Assistant" as Assistant {
  * id : String
  * name : String
}

entity "CoupleAnalysis" as CoupleAnalysis {
  * id : String
  * channelId : String
  * rawResult : String
}

entity "PersonaProfile" as PersonaProfile {
  * id : String
  * userId : String
  * categoryCodeId : String
  * content : String
  * confidenceScore : Float
  * isStatic : Boolean
}

entity "CategoryCode" as CategoryCode {
  * id : String
  * code : String
  * description : String
}

entity "PushSchedule" as PushSchedule {
  * id : String
  * userId : String
  * scheduledAt : DateTime
  * sentAt : DateTime
  * status : PushStatus
}

entity "UserAnswer" as UserAnswer {
  * id : String
  * pushScheduleId : String
  * answerText : String
  * createdAt : DateTime
}

entity "Advice" as Advice {
  * id : String
  * channelId : String
  * advice : String
  * generatedById : String
}

' 관계 설정
User ||--o{ UserProfile : "has"
User ||--o{ Wallet : "has"
User ||--o{ ChannelMember : "joins"
User ||--o{ PushSchedule : "receives"
User ||--o{ UserSubscription : "subscribes"
User ||--o{ PersonaProfile : "has"

Channel ||--o{ ChannelMember : "has"
Channel ||--o{ Chat : "has"
Channel ||--o{ CoupleAnalysis : "analyzes"
Channel ||--o{ Advice : "provides"

Assistant ||--o{ Chat : "writes"

PushSchedule ||--o{ UserAnswer : "triggers"
PersonaProfile }o--|| CategoryCode : "categorized"

' 엔티티 설명 주석
note right of User
  <b>User</b>
  - 회원 기본 정보
end note

note right of Channel
  <b>Channel</b>
  - 커플/그룹 대화방
end note

note right of PersonaProfile
  <b>PersonaProfile</b>
  - 성향/프로필 분석
end note

note right of Advice
  <b>Advice</b>
  - AI 맞춤형 조언
end note

@enduml
