import { useState, useEffect, useCallback } from 'react';
import { useNavigate } from 'react-router-dom';
// import { useTranslation } from 'react-i18next';
import { useAuthStore, useIsAuthenticated } from '../../../../stores/authStore';
import { useProfileStore } from '../../../../stores/profileStore';
import type { Profile } from '../../../../domain/dto/ProfileDto';

type TabType = 'posts' | 'followers' | 'following';

interface UseProfileDataReturn {
  // ÏÉÅÌÉú
  isLoading: boolean;
  isError: boolean;
  isOwnProfile: boolean;
  isEditing: boolean;
  activeTab: TabType;

  // Îç∞Ïù¥ÌÑ∞
  profile: Profile | null;
  stats: any;
  posts: any[];
  followers: any[];
  following: any[];
  isFollowing: boolean;

  // Ïï°ÏÖò
  handleEditProfile: () => void;
  handleSaveProfile: () => void;
  handleCancelEdit: () => void;
  handleFollow: () => void;
  handleUnfollow: () => void;
  handleTabChange: (tab: TabType) => void;
  handleRefresh: () => void;
}

export const useProfileData = (userId?: string): UseProfileDataReturn => {
  // const { t } = useTranslation();
  const navigate = useNavigate();
  const { user, token, loading: authLoading } = useAuthStore();
  const isAuthenticated = useIsAuthenticated();
  const {
    profile,
    stats,
    posts,
    followers,
    following,
    isLoading,
    isError,
    isFollowing,
    fetchProfile,
    updateProfile,
    followUser,
    unfollowUser,
    fetchFollowers,
    fetchFollowing,
    fetchPosts,
  } = useProfileStore();

  // Î°úÏª¨ ÏÉÅÌÉú
  const [isEditing, setIsEditing] = useState(false);
  const [activeTab, setActiveTab] = useState<TabType>('posts');

  // ÌòÑÏû¨ ÏÇ¨Ïö©ÏûêÏùò ÌîÑÎ°úÌïÑÏù∏ÏßÄ ÌôïÏù∏
  const isOwnProfile = userId === 'me' || user?.id === userId;

  // ÌîÑÎ°úÌïÑ Îç∞Ïù¥ÌÑ∞ Î°úÎìú
  useEffect(() => {
    if (userId && !authLoading) {
      console.log('üîç Fetching profile for userId:', userId);
      console.log('üîê Current user:', user);
      console.log('üîë Token in localStorage:', localStorage.getItem('accessToken') ? 'exists' : 'missing');
      console.log('‚úÖ Is authenticated:', isAuthenticated);
      
      // Ïù∏Ï¶ù ÌôïÏù∏ - Î°úÎî©Ïù¥ ÏôÑÎ£åÎêú ÌõÑÏóêÎßå Ï≤¥ÌÅ¨
      if (userId === 'me') {
        if (!isAuthenticated) {
          console.log('üö´ User not authenticated, redirecting to login');
          navigate('/login');
          return;
        } else {
          console.log('‚úÖ User authenticated, fetching own profile');
          // 'me'Ïù∏ Í≤ΩÏö∞ 'me'Î°ú ÌîÑÎ°úÌïÑ Ï°∞Ìöå (Î∞±ÏóîÎìúÏóêÏÑú /users/meÎ°ú Ï≤òÎ¶¨)
          fetchProfile('me');
        }
      } else {
        // Îã§Î•∏ ÏÇ¨Ïö©ÏûêÏùò ÌîÑÎ°úÌïÑ Ï°∞Ìöå
        fetchProfile(userId);
      }
    }
  }, [userId, fetchProfile, user, isAuthenticated, authLoading, navigate]);

  // ÌÉ≠ Î≥ÄÍ≤Ω Ïãú Ìï¥Îãπ Îç∞Ïù¥ÌÑ∞ Î°úÎìú
  useEffect(() => {
    if (userId && profile) {
      switch (activeTab) {
        case 'posts':
          fetchPosts(userId);
          break;
        case 'followers':
          fetchFollowers(userId);
          break;
        case 'following':
          fetchFollowing(userId);
          break;
      }
    }
  }, [userId, activeTab, profile, fetchPosts, fetchFollowers, fetchFollowing]);

  // Ìé∏Ïßë Î™®Îìú ÌÜ†Í∏Ä
  const handleEditProfile = useCallback(() => {
    if (isOwnProfile) {
      setIsEditing(true);
    }
  }, [isOwnProfile]);

  // ÌîÑÎ°úÌïÑ Ï†ÄÏû•
  const handleSaveProfile = useCallback(async () => {
    if (!profile || !isOwnProfile) return;

    try {
      await updateProfile({
        userId: profile.userId,
        displayName: profile.displayName,
        bio: profile.bio,
        avatar: profile.avatar,
        coverImage: profile.coverImage,
        location: profile.location,
        website: profile.website,
        socialLinks: profile.socialLinks,
        preferences: profile.preferences,
      });
      setIsEditing(false);
    } catch (error) {
      console.error('Failed to update profile:', error);
    }
  }, [profile, isOwnProfile, updateProfile]);

  // Ìé∏Ïßë Ï∑®ÏÜå
  const handleCancelEdit = useCallback(() => {
    setIsEditing(false);
  }, []);

  // ÌåîÎ°úÏö∞
  const handleFollow = useCallback(async () => {
    if (!user?.id || !userId || isOwnProfile) return;

    try {
      await followUser(user.id, userId);
    } catch (error) {
      console.error('Failed to follow user:', error);
    }
  }, [user?.id, userId, isOwnProfile, followUser]);

  // Ïñ∏ÌåîÎ°úÏö∞
  const handleUnfollow = useCallback(async () => {
    if (!user?.id || !userId || isOwnProfile) return;

    try {
      await unfollowUser(user.id, userId);
    } catch (error) {
      console.error('Failed to unfollow user:', error);
    }
  }, [user?.id, userId, isOwnProfile, unfollowUser]);

  // ÌÉ≠ Î≥ÄÍ≤Ω
  const handleTabChange = useCallback((tab: TabType) => {
    setActiveTab(tab);
  }, []);

  // ÏÉàÎ°úÍ≥†Ïπ®
  const handleRefresh = useCallback(() => {
    if (userId) {
      fetchProfile(userId);
    }
  }, [userId, fetchProfile]);

  return {
    // ÏÉÅÌÉú
    isLoading,
    isError,
    isOwnProfile,
    isEditing,
    activeTab,

    // Îç∞Ïù¥ÌÑ∞
    profile,
    stats,
    posts,
    followers,
    following,
    isFollowing,

    // Ïï°ÏÖò
    handleEditProfile,
    handleSaveProfile,
    handleCancelEdit,
    handleFollow,
    handleUnfollow,
    handleTabChange,
    handleRefresh,
  };
};
